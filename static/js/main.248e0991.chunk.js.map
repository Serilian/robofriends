{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","components/actions.js","constans.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","Component","CounterButton","updateCount","count","console","log","Fragment","color","onClick","PureComponent","Header","nextProps","nextState","nextContext","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","src_components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","logger","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.248e0991.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n          aria-label=\"Search Box\"\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.error) {\r\n            return (<h1>Thats not good</h1>)\r\n        } else {\r\n            return this.props.children\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState((state) => {\r\n             return {count: state.count + 1}\r\n        })\r\n    };\r\n\r\n    render() {\r\n        console.log('Counter button');\r\n        return (\r\n            <>\r\n                <button color={this.props.color} onClick={this.updateCount}>Click Me! {this.state.count}</button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport './Header.css';\r\nimport CounterButton from  './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h1 className='f1 header'>RoboFriends</h1>\r\n            <CounterButton color=\"red\"/>\r\n            </>\r\n                )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport {setSearchField, requestRobots} from \"../components/actions\";\r\nimport {connect} from 'react-redux';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => {\r\n            dispatch(setSearchField(event.target.value))\r\n        },\r\n        onRequestRobots: () => {\r\n          dispatch(requestRobots());\r\n        }\r\n    }\r\n};\r\n\r\nclass App extends Component {\r\n\r\n    componentWillMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from \"../constans\";\r\nimport {\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS} from \"../constans\";\r\n\r\n\r\nexport const  setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\n\r\nexport const  requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {\r\n            dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users})\r\n        })\r\n        .catch(error => {\r\n            dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})\r\n        });\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD} from \"./constans\";\r\nimport {\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING\r\n} from \"./constans\";\r\n\r\nconst initialStateSearch = {\r\n    searchfield: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchfield: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport {searchRobots, requestRobots} from \"./reducers\";\r\nimport {createLogger} from \"redux-logger\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunkMiddleware,logger)));\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}